
make optimization loop - endless

anti overfitting measures

best model evolution steps

--group {traits} 


broad analisis 
python -m Analytics.broad_analytics --points 10 --repeats 1 --games 15 --starting-coins 10 --num-battles 3 --workers 12 --chunk-size 200 --seed 123 --outcsv src/Analytics/analytics_out/broad_samples.csv

trait itteration:
python -m Analytics.simple_analitics iterate-trait --traits src/Analytics/single_trait.json --target-trait aggressiveness --step 20 --runs 5 --games 60 --starting-coins 10 --num-battles 3 --workers 12 --chunk-size 5 --seed 42 --model-name gen5 --outdir src/Analytics/analytics_out

coins per round:
python -m Analytics.simple_analitics coins-per-round --traits src/Analytics/traits.json --games 120 --starting-coins 10 --workers 12 --outdir src/Analytics/analytics_out --chunk-size 10 --model-name gen4

simple single game:
python -m bbb.cli 

run training models delta function:
python -m Training.run_delta 

singular Baeysian optimization
python -m Training.bo_train 

Itterative Baeysian optimization
python -m Training.train_pool --pool src/Training/weights_pool.json --iters 1 --pool-sample 2 --n-calls 10 --n-init 4 --seed 42 --randomizations 1 --games-per-alpha 1 --cycles-per-position 1 --workers 12



Notes from Simulations:

Playing conservative with coins VS spending big -> converges to Spending big

Betting More -> better results

bluffiness higer = better